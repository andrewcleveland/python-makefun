<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="2" tests="51" time="0.749"><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="15" name="test_non_representable_defaults" time="0.002300262451171875"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="28" name="test_preserve_attributes" time="0.0021317005157470703"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="43" name="test_empty_name_in_string" time="0.001794576644897461"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="56" name="test_same_than_wraps_basic" time="0.002814054489135742"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="88" name="tests_wraps_sigchange" time="0.002012014389038086"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="110" name="test_qualname_when_nested" time="0.002049684524536133"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="131" name="test_type_hint_error" time="0.03807258605957031"></testcase><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0024123191833496094"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _func_impl_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.0030164718627929688"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.0026879310607910156"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0027990341186523438"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.0026209354400634766"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.002305746078491211"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.003094196319580078"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.001070261001586914"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: &lt;py._xmlgen.raw object at 0x7f1d62b4f9e8&gt;</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.002620220184326172"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.0021986961364746094"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.00240325927734375"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.002638578414916992"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.002443075180053711"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=False]" time="0.003029346466064453"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=True]" time="0.0021767616271972656"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=False]" time="0.002502918243408203"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=True]" time="0.0032057762145996094"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="53" name="test_ex_nihilo_kw_only" time="0.0023729801177978516"><system-out>def foo(b, *, a=0, **kwargs):
    return _func_impl_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=False]" time="0.002804994583129883"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=True]" time="0.0022172927856445312"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="112" name="test_helper_functions" time="0.001979351043701172"><system-out>original signature: (b, c, a=0)
modified signature: (z, c, o=True)
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="132" name="test_injection" time="0.002785205841064453"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="149" name="test_var_length" time="0.002344369888305664"><system-out>def foo(a=0, *args, **kwargs):
    return _func_impl_(a=a, *args, **kwargs)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="164" name="test_positional_only" time="0.0014214515686035156"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="173" name="test_with_signature" time="0.0018873214721679688"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="186" name="test_with_signature_none" time="0.004526376724243164"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="202" name="test_wraps" time="0.004098176956176758"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="238" name="test_wraps_functools" time="0.002824068069458008"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.0018563270568847656"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.002444028854370117"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.0025696754455566406"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.10422945022583008"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="7" name="test_wraps_varpositional" time="0.0008132457733154297"><skipped message="known to fail" type="pytest.skip">makefun/tests/test_issues.py:7: &lt;py._xmlgen.raw object at 0x7f1d62af8860&gt;</skipped></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="20" name="test_invalid_signature_str" time="0.0030355453491210938"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="30" name="test_invalid_signature_str_py3" time="0.0023336410522460938"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="3" name="test_doc" time="0.0072422027587890625"><system-out>Help on function bar in module makefun.tests.test_partial_and_macros:

bar(y)
    &lt;This function is equivalent to &apos;foo(y, x=12)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="21" name="test_partial" time="0.002911806106567383"><system-out>hello
1 2
Help on function foo in module makefun.tests.test_partial_and_macros:

foo(x, y)
    &lt;This function is equivalent to &apos;foo(x, y, a=hello)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :param a:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="14" name="test_create_facades" time="0.0038750171661376953"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="76" name="test_so_decorator" time="0.002292156219482422"><system-out>Help on function hello in module makefun.tests.test_so:

hello()
    what?

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="111" name="test_so_facade" time="0.002817392349243164"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="149" name="test_so_sig_preserving" time="0.0041599273681640625"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="183" name="test_sig_preserving_2" time="0.0043468475341796875"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="230" name="test_so_partial" time="0.0029764175415039062"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="260" name="test_so_partial2" time="0.0053157806396484375"></testcase></testsuite>