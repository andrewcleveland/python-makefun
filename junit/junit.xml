<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="2" tests="64" time="0.657"><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="15" name="test_non_representable_defaults" time="0.004060506820678711"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="28" name="test_preserve_attributes" time="0.0015254020690917969"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="43" name="test_empty_name_in_string" time="0.001493692398071289"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="56" name="test_same_than_wraps_basic" time="0.0018949508666992188"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="88" name="tests_wraps_sigchange" time="0.0017571449279785156"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="110" name="test_qualname_when_nested" time="0.0016629695892333984"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="131" name="test_type_hint_error" time="0.029438257217407227"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="145" name="test_type_hint_error2" time="0.0030393600463867188"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="10" name="test_compilefun" time="0.008371829986572266"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="43" name="test_compilefun_nested" time="0.0025115013122558594"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="58" name="test_compilefun_nested_already_compiled" time="0.002683401107788086"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="74" name="test_compilefun_nested_exclude[variant=all]" time="0.002541780471801758"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="74" name="test_compilefun_nested_exclude[variant=named]" time="0.002371549606323242"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="96" name="test_compilefun_co_names" time="0.0015285015106201172"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="113" name="test_compilefun_nameerror" time="0.0017528533935546875"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="125" name="test_compilefun_method" time="0.001935720443725586"><system-out>in A.meth1: par1 = via meth1
</system-out></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="148" name="test_compileclass_decorator" time="0.0011775493621826172"></testcase><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0011513233184814453"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _func_impl_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.001432657241821289"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.0027213096618652344"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0018391609191894531"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.0018951892852783203"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.0019762516021728516"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.001962423324584961"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0007615089416503906"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: This test is known to fail because inspect.signature does not detect comment type hints</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.0018208026885986328"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.0017728805541992188"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.0018296241760253906"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.0017375946044921875"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0017695426940917969"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=False]" time="0.0019452571868896484"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=True]" time="0.001963376998901367"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=False]" time="0.0018455982208251953"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=True]" time="0.0021371841430664062"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="53" name="test_ex_nihilo_kw_only" time="0.0015261173248291016"><system-out>def foo(b, *, a=0, **kwargs):
    return _func_impl_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=False]" time="0.001873016357421875"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=True]" time="0.001882791519165039"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="112" name="test_helper_functions" time="0.0013518333435058594"><system-out>original signature: (b, c, a=0)
modified signature: (z, c, o=True)
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="132" name="test_injection" time="0.0019259452819824219"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="149" name="test_var_length" time="0.002256155014038086"><system-out>def foo(a, b=0, *args, **kwargs):
    return _func_impl_(a, b, *args, **kwargs)

func_impl called !

func_impl called !

func_impl called !

def foo(b=0, *args, **kwargs):
    return _func_impl_(b, *args, **kwargs)

func_impl called !

func_impl called !

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="199" name="test_positional_only" time="0.0013318061828613281"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="208" name="test_with_signature" time="0.0017557144165039062"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="221" name="test_with_signature_none" time="0.0012373924255371094"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="237" name="test_wraps" time="0.0024144649505615234"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="273" name="test_wraps_functools" time="0.0018243789672851562"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.0017867088317871094"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.0016045570373535156"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.0015139579772949219"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.10295867919921875"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="7" name="test_wraps_varpositional" time="0.0006465911865234375"><skipped message="known to fail" type="pytest.skip">makefun/tests/test_issues.py:7: known to fail</skipped></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="20" name="test_varpositional2" time="0.0018465518951416016"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="31" name="test_invalid_signature_str" time="0.0018231868743896484"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="41" name="test_invalid_signature_str_py3" time="0.0017514228820800781"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="51" name="test_return_annotation_in_py2" time="0.001573801040649414"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="65" name="test_init_replaced" time="0.0017888545989990234"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="3" name="test_doc" time="0.004462003707885742"><system-out>Help on function bar in module makefun.tests.test_partial_and_macros:

bar(y)
    &lt;This function is equivalent to &apos;foo(y, x=12)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="21" name="test_partial" time="0.0023076534271240234"><system-out>hello
1 2
Help on function foo in module makefun.tests.test_partial_and_macros:

foo(x, y)
    &lt;This function is equivalent to &apos;foo(x, y, a=hello)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :param a:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="14" name="test_create_facades" time="0.002961874008178711"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="76" name="test_so_decorator" time="0.0026633739471435547"><system-out>Help on function hello in module makefun.tests.test_so:

hello()
    what?

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="111" name="test_so_facade" time="0.0018498897552490234"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="149" name="test_so_sig_preserving" time="0.0024733543395996094"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="183" name="test_sig_preserving_2" time="0.0025637149810791016"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="230" name="test_so_partial" time="0.0030786991119384766"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="260" name="test_so_partial2" time="0.005365133285522461"></testcase></testsuite>