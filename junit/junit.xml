<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="2" tests="67" time="0.693"><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="15" name="test_non_representable_defaults" time="0.004685878753662109"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="28" name="test_preserve_attributes" time="0.0017971992492675781"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="43" name="test_empty_name_in_string" time="0.001575469970703125"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="56" name="test_same_than_wraps_basic" time="0.0017399787902832031"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="88" name="tests_wraps_sigchange" time="0.002130270004272461"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="110" name="test_qualname_when_nested" time="0.0019428730010986328"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="131" name="test_type_hint_error" time="0.031061172485351562"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="145" name="test_type_hint_error2" time="0.0020127296447753906"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="10" name="test_compilefun" time="0.006705284118652344"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="43" name="test_compilefun_nested" time="0.002722024917602539"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="58" name="test_compilefun_nested_already_compiled" time="0.0028908252716064453"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="74" name="test_compilefun_nested_exclude[variant=all]" time="0.002913951873779297"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="74" name="test_compilefun_nested_exclude[variant=named]" time="0.002945423126220703"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="96" name="test_compilefun_co_names" time="0.002321481704711914"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="113" name="test_compilefun_nameerror" time="0.002070903778076172"></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="125" name="test_compilefun_method" time="0.0028874874114990234"><system-out>in A.meth1: par1 = via meth1
</system-out></testcase><testcase classname="makefun.tests.test_compile_deco" file="makefun/tests/test_compile_deco.py" line="148" name="test_compileclass_decorator" time="0.0013947486877441406"></testcase><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.002035379409790039"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _func_impl_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.002369403839111328"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.0022602081298828125"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0023469924926757812"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.0025238990783691406"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.002351045608520508"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.0025963783264160156"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0006856918334960938"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: This test is known to fail because inspect.signature does not detect comment type hints</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.0027539730072021484"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.002426624298095703"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.002389192581176758"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.0022127628326416016"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0022618770599365234"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=False]" time="0.002351045608520508"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=True]" time="0.00235748291015625"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=False]" time="0.0021238327026367188"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=True]" time="0.0023622512817382812"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="53" name="test_ex_nihilo_kw_only" time="0.001859903335571289"><system-out>def foo(b, *, a=0, **kwargs):
    return _func_impl_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=False]" time="0.0022230148315429688"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=True]" time="0.0023910999298095703"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="112" name="test_helper_functions" time="0.0016906261444091797"><system-out>original signature: (b, c, a=0)
modified signature: (z, c, o=True)
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="132" name="test_injection" time="0.0019176006317138672"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="149" name="test_var_length" time="0.0022678375244140625"><system-out>def foo(a, b=0, *args, **kwargs):
    return _func_impl_(a, b, *args, **kwargs)

func_impl called !

func_impl called !

func_impl called !

def foo(b=0, *args, **kwargs):
    return _func_impl_(b, *args, **kwargs)

func_impl called !

func_impl called !

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="199" name="test_positional_only" time="0.001367330551147461"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="208" name="test_with_signature" time="0.0021653175354003906"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="221" name="test_with_signature_none" time="0.0013813972473144531"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="237" name="test_wraps" time="0.002393007278442383"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="273" name="test_wraps_functools" time="0.0023055076599121094"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.0019121170043945312"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.001995086669921875"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.0019299983978271484"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.10330891609191895"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="7" name="test_wraps_varpositional" time="0.0006985664367675781"><skipped message="known to fail" type="pytest.skip">makefun/tests/test_issues.py:7: known to fail</skipped></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="20" name="test_varpositional2" time="0.0020046234130859375"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="31" name="test_invalid_signature_str" time="0.0019736289978027344"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="41" name="test_invalid_signature_str_py3" time="0.0019197463989257812"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="51" name="test_return_annotation_in_py2" time="0.0017669200897216797"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="65" name="test_init_replaced" time="0.0019533634185791016"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="81" name="test_issue_55" time="0.001840829849243164"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="10" name="test_doc" time="0.004755258560180664"><system-out>Help on function bar in module makefun.tests.test_partial_and_macros:

bar(y, x=12)
    &lt;This function is equivalent to &apos;foo(y, x=12)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="44" name="test_partial" time="0.0027365684509277344"><system-out>2
1 hello
Help on function foo in module makefun.tests.test_partial_and_macros:

foo(x, a, y=&apos;hello&apos;)
    &lt;This function is equivalent to &apos;foo(x, a, y=&apos;hello&apos;)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :param a:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="74" name="test_issue_57" time="0.002022981643676758"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="96" name="test_create_with_partial" time="0.002051830291748047"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="14" name="test_create_facades" time="0.0027294158935546875"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="76" name="test_so_decorator" time="0.0025713443756103516"><system-out>Help on function hello in module makefun.tests.test_so:

hello()
    what?

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="111" name="test_so_facade" time="0.002029895782470703"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="149" name="test_so_sig_preserving" time="0.0028486251831054688"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="183" name="test_sig_preserving_2" time="0.0031468868255615234"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="230" name="test_so_partial" time="0.003314971923828125"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="260" name="test_so_partial2" time="0.006757259368896484"></testcase></testsuite>