<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="1" tests="26" time="0.498"><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0021691322326660156"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _call_handler_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.002351999282836914"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.0022172927856445312"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.002444744110107422"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.0022041797637939453"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.0020742416381835938"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.0019495487213134766"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0008602142333984375"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: &lt;py._xmlgen.raw object at 0x7f3ff82a26a0&gt;</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.001994609832763672"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.0019521713256835938"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.001957416534423828"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.002234935760498047"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.001758575439453125"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="14" name="test_from_string" time="0.002211332321166992"><system-out>Generated Source :
def foo(b, a=0):
    return _call_handler_(b=b, a=a)

my_handler called !
def foo(b, *, a=0, **kwargs):
    return _call_handler_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="49" name="test_from_sig" time="0.0017001628875732422"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _call_handler_(z=z, b=b, a=a)

my_handler called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="87" name="test_helper_functions" time="0.0013506412506103516"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="104" name="test_injection" time="0.0020837783813476562"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="121" name="test_var_length" time="0.0017108917236328125"><system-out>def foo(a=0, *args, **kwargs):
    return _call_handler_(a=a, *args, **kwargs)

my_handler called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="136" name="test_positional_only" time="0.0010297298431396484"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="145" name="test_with_signature" time="0.0016951560974121094"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="158" name="test_with_signature_wrapper" time="0.0028133392333984375"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.0015959739685058594"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.0018010139465332031"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.0017955303192138672"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.14061903953552246"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="9" name="test_create_facades" time="0.0030508041381835938"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
This is generic handler called by func3
</system-out></testcase></testsuite>