<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="1" tests="46" time="0.703"><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="16" name="test_non_representable_defaults" time="0.0026221275329589844"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="29" name="test_preserve_attributes" time="0.0018658638000488281"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="44" name="test_empty_name_in_string" time="0.002041339874267578"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="57" name="test_same_than_wraps_basic" time="0.002778291702270508"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="89" name="tests_wraps_sigchange" time="0.0018689632415771484"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="111" name="test_qualname_when_nested" time="0.0016713142395019531"></testcase><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.002135038375854492"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _func_impl_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.0028104782104492188"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.002671957015991211"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.002500295639038086"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.0019736289978027344"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.0033388137817382812"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.0035703182220458984"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0013546943664550781"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: &lt;py._xmlgen.raw object at 0x7fac9339ecf8&gt;</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.0022640228271484375"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.001810312271118164"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.0025436878204345703"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.0023276805877685547"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0012025833129882812"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=False]" time="0.002595186233520508"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=True]" time="0.0025997161865234375"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=False]" time="0.0026068687438964844"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=True]" time="0.0024225711822509766"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="53" name="test_ex_nihilo_kw_only" time="0.0017457008361816406"><system-out>def foo(b, *, a=0, **kwargs):
    return _func_impl_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=False]" time="0.0021114349365234375"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=True]" time="0.0020079612731933594"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="112" name="test_helper_functions" time="0.001272439956665039"><system-out>original signature: (b, c, a=0)
modified signature: (z, c, o=True)
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="132" name="test_injection" time="0.0019888877868652344"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="149" name="test_var_length" time="0.0035707950592041016"><system-out>def foo(a=0, *args, **kwargs):
    return _func_impl_(a=a, *args, **kwargs)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="164" name="test_positional_only" time="0.0015387535095214844"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="173" name="test_with_signature" time="0.0023393630981445312"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="186" name="test_with_signature_none" time="0.0011937618255615234"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="202" name="test_wraps" time="0.003762960433959961"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="238" name="test_wraps_functools" time="0.0019600391387939453"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.0019421577453613281"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.002482891082763672"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.001405954360961914"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.13675332069396973"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="3" name="test_doc" time="0.00549626350402832"><system-out>Help on function bar in module makefun.tests.test_partial_and_macros:

bar(y)
    &lt;This function is equivalent to &apos;foo(y, x=12)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="21" name="test_partial" time="0.0021567344665527344"><system-out>hello
1 2
Help on function foo in module makefun.tests.test_partial_and_macros:

foo(x, y)
    &lt;This function is equivalent to &apos;foo(x, y, a=hello)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :param a:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="13" name="test_create_facades" time="0.0032579898834228516"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="75" name="test_so_decorator" time="0.0022575855255126953"><system-out>Help on function hello in module makefun.tests.test_so:

hello()
    what?

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="110" name="test_so_facade" time="0.001890420913696289"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="148" name="test_so_sig_preserving" time="0.0023577213287353516"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="182" name="test_sig_preserving_2" time="0.0035958290100097656"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="229" name="test_so_partial" time="0.0032901763916015625"></testcase></testsuite>