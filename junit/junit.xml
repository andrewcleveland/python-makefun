<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="1" tests="22" time="0.329"><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0025403499603271484"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _call_handler_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.003415822982788086"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.002161741256713867"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0024628639221191406"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.001684427261352539"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.0017447471618652344"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.002550840377807617"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0009181499481201172"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: &lt;py._xmlgen.raw object at 0x7f1a797bef60&gt;</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.0025293827056884766"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.002391815185546875"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.002350330352783203"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.0026297569274902344"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0020079612731933594"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="14" name="test_from_string" time="0.0024671554565429688"><system-out>Generated Source :
def foo(b, a=0):
    return _call_handler_(b=b, a=a)

my_handler called !
def foo(b, *, a=0, **kwargs):
    return _call_handler_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="49" name="test_from_sig" time="0.001991748809814453"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _call_handler_(z=z, b=b, a=a)

my_handler called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="87" name="test_helper_functions" time="0.0015184879302978516"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="104" name="test_injection" time="0.002313852310180664"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="121" name="test_var_length" time="0.0019407272338867188"><system-out>def foo(a=0, *args, **kwargs):
    return _call_handler_(a=a, *args, **kwargs)

my_handler called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="136" name="test_positional_only" time="0.0010094642639160156"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="145" name="test_with_signature" time="0.002052783966064453"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="158" name="test_with_signature_wrapper" time="0.003408670425415039"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="9" name="test_create_facades" time="0.002465963363647461"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
This is generic handler called by func3
</system-out></testcase></testsuite>