<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="1" tests="20" time="0.285"><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0021355152130126953"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _call_handler_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.002461671829223633"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.001967906951904297"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0015554428100585938"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.002802133560180664"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.003902912139892578"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.0023665428161621094"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.000993490219116211"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: &lt;py._xmlgen.raw object at 0x7f6930958320&gt;</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.002304553985595703"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.002169370651245117"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.002201080322265625"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.00244903564453125"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0022766590118408203"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="13" name="test_from_string" time="0.0021615028381347656"><system-out>Generated Source :
def foo(b, a=0):
    return _call_handler_(b=b, a=a)

my_handler called !
def foo(b, *, a=0, **kwargs):
    return _call_handler_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="48" name="test_from_sig" time="0.0018310546875"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _call_handler_(z=z, b=b, a=a)

my_handler called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="86" name="test_helper_functions" time="0.0015902519226074219"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="103" name="test_injection" time="0.001958608627319336"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="120" name="test_var_length" time="0.0017135143280029297"><system-out>def foo(a=0, *args, **kwargs):
    return _call_handler_(a=a, *args, **kwargs)

my_handler called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="135" name="test_positional_only" time="0.001337289810180664"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="9" name="test_create_facades" time="0.0024378299713134766"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
This is generic handler called by func3
</system-out></testcase></testsuite>