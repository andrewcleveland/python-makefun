<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="2" tests="55" time="0.698"><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="15" name="test_non_representable_defaults" time="0.0042781829833984375"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="28" name="test_preserve_attributes" time="0.002599477767944336"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="43" name="test_empty_name_in_string" time="0.0015354156494140625"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="56" name="test_same_than_wraps_basic" time="0.0025763511657714844"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="88" name="tests_wraps_sigchange" time="0.0019214153289794922"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="110" name="test_qualname_when_nested" time="0.0019724369049072266"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="131" name="test_type_hint_error" time="0.03369712829589844"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="145" name="test_type_hint_error2" time="0.0019876956939697266"></testcase><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0018093585968017578"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _func_impl_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.002621173858642578"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.002602815628051758"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0026557445526123047"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.002779245376586914"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.0024797916412353516"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.0024063587188720703"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0006999969482421875"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: This test is known to fail because inspect.signature does not detect comment type hints</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.002287149429321289"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.002213001251220703"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.00214385986328125"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.002180814743041992"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0024259090423583984"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=False]" time="0.002378702163696289"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=True]" time="0.002590656280517578"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=False]" time="0.0022034645080566406"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=True]" time="0.002479076385498047"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="53" name="test_ex_nihilo_kw_only" time="0.002041339874267578"><system-out>def foo(b, *, a=0, **kwargs):
    return _func_impl_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=False]" time="0.0024340152740478516"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=True]" time="0.002516508102416992"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="112" name="test_helper_functions" time="0.001976490020751953"><system-out>original signature: (b, c, a=0)
modified signature: (z, c, o=True)
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="132" name="test_injection" time="0.00473475456237793"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="149" name="test_var_length" time="0.002811908721923828"><system-out>def foo(a, b=0, *args, **kwargs):
    return _func_impl_(a, b, *args, **kwargs)

func_impl called !

func_impl called !

func_impl called !

def foo(b=0, *args, **kwargs):
    return _func_impl_(b, *args, **kwargs)

func_impl called !

func_impl called !

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="199" name="test_positional_only" time="0.001367330551147461"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="208" name="test_with_signature" time="0.002077341079711914"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="221" name="test_with_signature_none" time="0.0014431476593017578"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="237" name="test_wraps" time="0.003004789352416992"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="273" name="test_wraps_functools" time="0.002340555191040039"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.002004861831665039"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.002231121063232422"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.0019698143005371094"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.10391759872436523"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="7" name="test_wraps_varpositional" time="0.0009033679962158203"><skipped message="known to fail" type="pytest.skip">makefun/tests/test_issues.py:7: known to fail</skipped></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="20" name="test_varpositional2" time="0.0033011436462402344"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="31" name="test_invalid_signature_str" time="0.0023245811462402344"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="41" name="test_invalid_signature_str_py3" time="0.0018908977508544922"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="51" name="test_return_annotation_in_py2" time="0.0023698806762695312"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="65" name="test_init_replaced" time="0.0023279190063476562"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="3" name="test_doc" time="0.005561351776123047"><system-out>Help on function bar in module makefun.tests.test_partial_and_macros:

bar(y)
    &lt;This function is equivalent to &apos;foo(y, x=12)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="21" name="test_partial" time="0.0019443035125732422"><system-out>hello
1 2
Help on function foo in module makefun.tests.test_partial_and_macros:

foo(x, y)
    &lt;This function is equivalent to &apos;foo(x, y, a=hello)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :param a:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="14" name="test_create_facades" time="0.00284576416015625"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="76" name="test_so_decorator" time="0.0017380714416503906"><system-out>Help on function hello in module makefun.tests.test_so:

hello()
    what?

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="111" name="test_so_facade" time="0.0015709400177001953"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="149" name="test_so_sig_preserving" time="0.0028641223907470703"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="183" name="test_sig_preserving_2" time="0.0029256343841552734"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="230" name="test_so_partial" time="0.002324819564819336"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="260" name="test_so_partial2" time="0.0027990341186523438"></testcase></testsuite>