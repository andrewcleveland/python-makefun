<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="2" tests="54" time="0.725"><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="15" name="test_non_representable_defaults" time="0.0024170875549316406"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="28" name="test_preserve_attributes" time="0.0016362667083740234"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="43" name="test_empty_name_in_string" time="0.0018248558044433594"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="56" name="test_same_than_wraps_basic" time="0.0018875598907470703"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="88" name="tests_wraps_sigchange" time="0.002202272415161133"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="110" name="test_qualname_when_nested" time="0.002580881118774414"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="131" name="test_type_hint_error" time="0.03638577461242676"></testcase><testcase classname="makefun.tests.test_advanced" file="makefun/tests/test_advanced.py" line="145" name="test_type_hint_error2" time="0.002493143081665039"></testcase><testcase classname="makefun.tests.test_create_from_signature" file="makefun/tests/test_create_from_signature.py" line="16" name="test_positional_only" time="0.0021300315856933594"><system-err>Error in generated code:
def foo(a, /, *args, **kwargs):
    return _func_impl_(a, *args, **kwargs)

</system-err></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=True]" time="0.002752542495727539"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=False-self_ref=False]" time="0.0030431747436523438"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=True]" time="0.0027909278869628906"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=1-self_ref=False]" time="0.002908945083618164"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=True]" time="0.002957582473754883"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="18" name="test_basic[type_hints=2-self_ref=False]" time="0.002245187759399414"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="98" name="test_type_comments" time="0.0009407997131347656"><skipped message="This test is known to fail because inspect.signature does not detect comment type hints" type="pytest.skip">makefun/tests/test_create_from_string.py:98: &lt;py._xmlgen.raw object at 0x7fa6030d6c50&gt;</skipped></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple]" time="0.0025599002838134766"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star]" time="0.002500772476196289"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args1]" time="0.0027964115142822266"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_simple_with_star_args2]" time="0.0027570724487304688"></testcase><testcase classname="makefun.tests.test_create_from_string" file="makefun/tests/test_create_from_string.py" line="117" name="test_arguments[case_with_type_comments_and_newlines]" time="0.0025599002838134766"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=False]" time="0.002393007278442383"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=str-decorator=True]" time="0.0026416778564453125"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=False]" time="0.002887725830078125"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="15" name="test_ex_nihilo[type=Signature-decorator=True]" time="0.0025882720947265625"><system-out>Generated Source :
def foo(b, a=0):
    return _func_impl_(b=b, a=a)

func_impl called !
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="53" name="test_ex_nihilo_kw_only" time="0.002141714096069336"><system-out>def foo(b, *, a=0, **kwargs):
    return _func_impl_(b=b, a=a, **kwargs)

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=False]" time="0.0026242733001708984"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="70" name="test_from_sig_wrapper[use_decorator=True]" time="0.002443075180053711"><system-out>Original Signature: (b, a=0)
New Signature: (z, b, a=0)
Generated Source :
def foo(z, b, a=0):
    return _func_impl_(z=z, b=b, a=a)

func_impl called ! z=3
foo called: b=2, a=0
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="112" name="test_helper_functions" time="0.0017461776733398438"><system-out>original signature: (b, c, a=0)
modified signature: (z, c, o=True)
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="132" name="test_injection" time="0.0021238327026367188"><system-out>This is generic handler called by func1
called from func1 !
This is generic handler called by func2
</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="149" name="test_var_length" time="0.002009153366088867"><system-out>def foo(a, b=0, *args, **kwargs):
    return _func_impl_(a, b, *args, **kwargs)

func_impl called !

func_impl called !

func_impl called !

def foo(b=0, *args, **kwargs):
    return _func_impl_(b, *args, **kwargs)

func_impl called !

func_impl called !

</system-out></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="199" name="test_positional_only" time="0.000751495361328125"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="208" name="test_with_signature" time="0.001157999038696289"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="221" name="test_with_signature_none" time="0.002035379409790039"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="237" name="test_wraps" time="0.0035009384155273438"></testcase><testcase classname="makefun.tests.test_doc" file="makefun/tests/test_doc.py" line="273" name="test_wraps_functools" time="0.0036029815673828125"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="21" name="test_generator" time="0.0022237300872802734"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="37" name="test_generator_with_signature" time="0.0022733211517333984"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="53" name="test_generator_based_coroutine" time="0.0017952919006347656"></testcase><testcase classname="makefun.tests.test_generators_coroutines" file="makefun/tests/test_generators_coroutines.py" line="77" name="test_native_coroutine" time="0.10353302955627441"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="7" name="test_wraps_varpositional" time="0.0007278919219970703"><skipped message="known to fail" type="pytest.skip">makefun/tests/test_issues.py:7: &lt;py._xmlgen.raw object at 0x7fa60307bc88&gt;</skipped></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="20" name="test_varpositional2" time="0.0021915435791015625"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="31" name="test_invalid_signature_str" time="0.0019791126251220703"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="41" name="test_invalid_signature_str_py3" time="0.0011720657348632812"></testcase><testcase classname="makefun.tests.test_issues" file="makefun/tests/test_issues.py" line="51" name="test_init_replaced" time="0.0014994144439697266"></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="3" name="test_doc" time="0.005905866622924805"><system-out>Help on function bar in module makefun.tests.test_partial_and_macros:

bar(y)
    &lt;This function is equivalent to &apos;foo(y, x=12)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_partial_and_macros" file="makefun/tests/test_partial_and_macros.py" line="21" name="test_partial" time="0.002542734146118164"><system-out>hello
1 2
Help on function foo in module makefun.tests.test_partial_and_macros:

foo(x, y)
    &lt;This function is equivalent to &apos;foo(x, y, a=hello)&apos;, see original &apos;foo&apos; doc below.&gt;
    
    a `foo` function
    
    :param x:
    :param y:
    :param a:
    :return:

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="14" name="test_create_facades" time="0.0036776065826416016"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="76" name="test_so_decorator" time="0.0018341541290283203"><system-out>Help on function hello in module makefun.tests.test_so:

hello()
    what?

</system-out></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="111" name="test_so_facade" time="0.0019729137420654297"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="149" name="test_so_sig_preserving" time="0.0029845237731933594"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="183" name="test_sig_preserving_2" time="0.003432035446166992"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="230" name="test_so_partial" time="0.004735231399536133"></testcase><testcase classname="makefun.tests.test_so" file="makefun/tests/test_so.py" line="260" name="test_so_partial2" time="0.006249904632568359"></testcase></testsuite>